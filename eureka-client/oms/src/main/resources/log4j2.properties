status = warn
monitorInterval = 300

# 全局变量
property.APP_NAME = oms
property.FILE_PATH = ./logs
## %d{yyyy-MM-dd HH:mm:ss.SSS} 输出“年-月-日 时:分:秒.毫秒”
## %-5level 日志级别对齐 。 也可以用 %-5p
## [%thread] 线程。   也可以用 [%t]
## %logger:%L-  方法名和输出日志的行号。 也可以用  %-20l
## %m%n   换行输出日志内容
## [%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-B3-ParentSpanId},%X{X-Span-Export}]   日志链路追踪
property.LAYOUT_PATTERN = %d{yyyy-MM-dd HH:mm:ss.SSS}  %-5level [TraceId %X{X-B3-TraceId},SpanId %X{X-B3-SpanId},ParentSpanId %X{X-B3-ParentSpanId},Export %X{X-Span-Export}] [%thread] %logger:%L-  %m%n

# 根记录器，所有记录器的父辈
rootLogger.level = debug


# 各类日志输出规则。  appender.自定义名字.log4j2关键字。可参考log4j2.xml

# 控制台
appender.console.type = Console
appender.console.name = STDOUT
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = ${LAYOUT_PATTERN}
rootLogger.appenderRef.console.ref = STDOUT
rootLogger.appenderRef.console.level = INFO

# 输出到文件
appender.A.type = RollingFile
appender.A.name = DebugRollingFile
appender.A.fileName = ${APP_NAME}
appender.A.filePattern = ${FILE_PATH}/${APP_NAME}.log.%d{yyyy-MM-dd}.%i
appender.A.layout.type = PatternLayout
appender.A.layout.pattern = ${LAYOUT_PATTERN}
## 日志文件规则
appender.A.policies.type = Policies
### 24小时封存文件，modulate用来校准当天时间
appender.A.policies.time.type = TimeBasedTriggeringPolicy
appender.A.policies.time.interval = 1
appender.A.policies.time.modulate = true
### 文件大小达到size时封存文件
appender.A.policies.size.type = SizeBasedTriggeringPolicy
appender.A.policies.size.size = 20M
### 生成100个日志文件后会覆盖以前的日志文件
appender.A.strategy.type = DefaultRolloverStrategy
appender.A.strategy.max = 100
## DEBUG以上的级别的日志信息不输出
appender.A.filter.threshold.type = ThresholdFilter
appender.A.filter.threshold.level = INFO
appender.A.filter.threshold.onMatch = DENY
appender.A.filter.threshold.onMisMatch = NEUTRAL
## 此文件输出的日志级别
rootLogger.appenderRef.A.ref = DebugRollingFile
rootLogger.appenderRef.A.level = DEBUG